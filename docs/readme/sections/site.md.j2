## GitHub Pages

### Requirements

1. **Public Repository**
   - GitHub Pages is available out-of-the-box for public repositories
   - For private repositories, a GitHub Enterprise plan is required
   - If you plan to make your repository public later, you can still set up and test the site generation locally

2. **Repository Settings**
   - Once your repository is public (or on an Enterprise plan):
     - Go to Repository Settings → Pages
     - Under "Build and deployment":
       - Set Source to "GitHub Actions"

3. **Branch Setup**
   - Create a `gh-pages` branch:
     ```bash
     git checkout --orphan gh-pages
     git reset --hard
     git commit --allow-empty -m "Initial gh-pages commit"
     git push origin gh-pages
     git checkout main  # Return to main branch
     ```
   - This branch is required for GitHub Pages deployment
   - The deployment workflow will manage this branch automatically once created

### Installation

```bash
# Install with site generation dependencies
pip install -e ".[all]"
```

### Local Development

The site generator can be used locally regardless of repository visibility:

```bash
# Generate site locally
python -m site_generator build

# Site will be generated in _site/ directory (git-ignored)
# View the generated site by opening _site/index.html in your browser
```

### GitHub Actions Integration

When requirements are met (public repository or Enterprise plan), the site automatically rebuilds and deploys when:
- The README is updated through the `build-readme` workflow
- The deployment workflow is modified
- The workflow is manually triggered

### File Structure

```
your-repo/
├── _site/           # Generated directory (git-ignored)
│   └── index.html   # Generated site
├── docs/
│   └── site/       
│       └── template.html  # Site template
└── src/
    └── site_generator/   # Generator package
```

### Customization

The site template is located in `docs/site/template.html` and can be customized with:
- Custom CSS styles
- Additional JavaScript
- Modified layout and structure
- Custom header/footer content

### Command Line Usage

```bash
# Generate site with default settings
python -m site_generator build

# Specify custom output directory
python -m site_generator build --output_dir="custom_dir"
```

### Testing

The site generation can be tested locally even if GitHub Pages deployment isn't available:
```bash
# Run the test suite
pytest tests/test_site_generator.py
```

### Troubleshooting

#### Common Issues

1. **"Resource not accessible by integration" Error**
   - **Problem**: Deployment fails with "Resource not accessible by integration" or "Create Pages site failed"
   - **Solution**: Ensure you've:
     1. Created the `gh-pages` branch (see Branch Setup section above)
     2. Enabled GitHub Pages in repository settings
     3. Set source to "GitHub Actions" in Pages settings
     4. Enabled proper workflow permissions

2. **Deployment Not Starting**
   - **Problem**: Workflow runs but site doesn't deploy
   - **Solution**: Verify that:
     1. Repository is public or on Enterprise plan
     2. `gh-pages` branch exists
     3. Workflow has correct permissions in repository settings

3. **Empty Site Deployment**
   - **Problem**: Site deploys but shows no content
   - **Solution**: Check that:
     1. Build step is generating content in `_site` directory
     2. `upload-pages-artifact` step has correct path
     3. Site generator is installed with all dependencies

For any persistent issues, check the workflow run logs for specific error messages and ensure all setup steps have been completed in order.
